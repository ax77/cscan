#ifndef op
#define op(op, en)
#endif

#ifndef op_digr
#define op_digr(op, en)
#endif

#ifndef op_spec
#define op_spec(op, en)
#endif

#ifndef kw
#define kw(n, ns)
#endif

#ifndef prepr
#define prepr(op, en)
#endif

prepr("#\n", PT_HEOL)
prepr("#include", PT_HINCLUDE)
prepr("#define", PT_HDEFINE)
prepr("#undef", PT_HUNDEF)
prepr("#if", PT_HIF)
prepr("#ifdef", PT_HIFDEF)
prepr("#ifndef", PT_HIFNDEF)
prepr("#endif", PT_HENDIF)
prepr("#else", PT_HELSE)
prepr("#elif", PT_HELIF)
prepr("#line", PT_HLINE)
prepr("#error", PT_HERROR)
prepr("#pragma", PT_HPRAGMA)
prepr("#warning", PT_HWARNING)
prepr("#include_next", PT_HINCLUDE_NEXT)

op_spec("<eof>", TOKEN_EOF)
op_spec("<error>", TOKEN_ERROR)
op_spec("<identifier>", TOKEN_IDENT)
op_spec("<number>", TOKEN_NUMBER)
op_spec("<char-constant>", TOKEN_CHAR)
op_spec("<string-constant>", TOKEN_STRING)
op_spec("<comment>", TOKEN_COMMENT )
op_spec("<placemarker>", T_SPEC_PLACEMARKER)
op_spec("<unhide>", T_SPEC_UNHIDE)

op_digr("%:%:", T_SHARP_SHARP)
op_digr("<:", T_LEFT_BRACKET)
op_digr(":>", T_RIGHT_BRACKET)
op_digr("<%", T_LEFT_BRACE)
op_digr("%>", T_RIGHT_BRACE)
op_digr("%:", T_SHARP)

op(">>=", T_RSHIFT_EQUAL)
op("<<=", T_LSHIFT_EQUAL)
op("...", T_DOT_DOT_DOT)
op("->", T_ARROW)
op("--", T_MINUS_MINUS)
op("-=", T_MINUS_EQUAL)
op("!=", T_NE)
op("..", T_DOT_DOT)
op("*=", T_TIMES_EQUAL)
op("/=", T_DIVIDE_EQUAL)
op("&=", T_AND_EQUAL)
op("&&", T_AND_AND)
op("##", T_SHARP_SHARP)
op("%=", T_PERCENT_EQUAL)
op("^=", T_XOR_EQUAL)
op("++", T_PLUS_PLUS)
op("+=", T_PLUS_EQUAL)
op("<=", T_LE)
op("<<", T_LSHIFT)
op("==", T_EQ)
op(">=", T_GE)
op(">>", T_RSHIFT)
op("||", T_OR_OR)
op("|=", T_OR_EQUAL)
op(",", T_COMMA)
op("-", T_MINUS)
op(";", T_SEMI_COLON)
op(":", T_COLON)
op("!", T_EXCLAMATION)
op("?", T_QUESTION)
op(".", T_DOT)
op("(", T_LEFT_PAREN)
op(")", T_RIGHT_PAREN)
op("[", T_LEFT_BRACKET)
op("]", T_RIGHT_BRACKET)
op("{", T_LEFT_BRACE)
op("}", T_RIGHT_BRACE)
op("*", T_TIMES)
op("/", T_DIVIDE)
op("&", T_AND)
op("#", T_SHARP)
op("%", T_PERCENT)
op("^", T_XOR)
op("+", T_PLUS)
op("<", T_LT)
op("=", T_ASSIGN)
op(">", T_GT)
op("|", T_OR)
op("~", T_TILDE)

op("$", T_DOLLAR_SIGN)
op("@", T_AT_SIGN)
op("`", T_GRAVE_ACCENT)
op("\\", T_BACKSLASH)



// c89/c99/c11 keywords, according to STD

kw(auto            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(break           ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(case            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(char            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(const           ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(continue        ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(default         ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(do              ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(double          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(else            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(enum            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(extern          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(float           ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(for             ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(goto            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(if              ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(inline          ,  NS_C99|NS_C11|NS_C2X )
kw(int             ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(long            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(register        ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(restrict        ,  NS_C99|NS_C11|NS_C2X )
kw(return          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(short           ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(signed          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(sizeof          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(static          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(struct          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(switch          ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(typedef         ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(union           ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(unsigned        ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(void            ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(volatile        ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(while           ,  NS_C89|NS_C99|NS_C11|NS_C2X )
kw(_Alignas        ,  NS_C11|NS_C2X )
kw(_Alignof        ,  NS_C11|NS_C2X )
kw(_Atomic         ,  NS_C11|NS_C2X )
kw(_Bool           ,  NS_C99|NS_C11|NS_C2X )
kw(_Complex        ,  NS_C99|NS_C11|NS_C2X )
kw(_Decimal128     ,  NS_C2X )
kw(_Decimal32      ,  NS_C2X )
kw(_Decimal64      ,  NS_C2X )
kw(_Generic        ,  NS_C11|NS_C2X )
kw(_Imaginary      ,  NS_C99|NS_C11|NS_C2X )
kw(_Noreturn       ,  NS_C11|NS_C2X )
kw(_Static_assert  ,  NS_C11|NS_C2X )
kw(_Thread_local   ,  NS_C11|NS_C2X )

// extensions, aliases, may NOT be used as keywords

kw(asm             ,  NS_RID|NS_GNU   )
kw(__asm           ,  NS_RID|NS_GNU   )
kw(__asm__         ,  NS_RID|NS_GNU   )
kw(__alignof       ,  NS_RID|NS_GNU   )
kw(__alignof__     ,  NS_RID|NS_GNU   )
kw(__attribute     ,  NS_RID|NS_GNU   )
kw(__attribute__   ,  NS_RID|NS_GNU   )
kw(__complex       ,  NS_RID|NS_GNU   )
kw(__complex__     ,  NS_RID|NS_GNU   )
kw(__const         ,  NS_RID|NS_GNU   )
kw(__const__       ,  NS_RID|NS_GNU   )
kw(__inline        ,  NS_RID|NS_GNU   )
kw(__inline__      ,  NS_RID|NS_GNU   )
kw(__restrict      ,  NS_RID|NS_GNU   )
kw(__restrict__    ,  NS_RID|NS_GNU   )
kw(__signed        ,  NS_RID|NS_GNU   )
kw(__signed__      ,  NS_RID|NS_GNU   )
kw(__thread        ,  NS_RID|NS_GNU   )
kw(typeof          ,  NS_RID|NS_GNU   )
kw(__typeof        ,  NS_RID|NS_GNU   )
kw(__typeof__      ,  NS_RID|NS_GNU   )
kw(__volatile      ,  NS_RID|NS_GNU   )
kw(__volatile__    ,  NS_RID|NS_GNU   )
kw(__label__       ,  NS_RID|NS_GNU   )
kw(__extension__   ,  NS_RID|NS_GNU   )

// these may be used as identifiers: int define = 0;

kw(include         ,  NS_CPP          )
kw(define          ,  NS_CPP          )
kw(defined         ,  NS_CPP          )
kw(undef           ,  NS_CPP          )
kw(ifdef           ,  NS_CPP          )
kw(ifndef          ,  NS_CPP          )
kw(endif           ,  NS_CPP          )
kw(elif            ,  NS_CPP          )
kw(line            ,  NS_CPP          )
kw(error           ,  NS_CPP          )
kw(pragma          ,  NS_CPP          )
kw(warning         ,  NS_CPP          )
kw(include_next    ,  NS_CPP          )


#undef op
#undef op_digr
#undef kw
#undef op_spec
#undef prepr

